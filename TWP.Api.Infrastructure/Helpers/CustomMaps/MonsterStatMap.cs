using CsvHelper.Configuration;
using TWP.Api.Core.DataTransferObjects;

public sealed class Dnd5eMonsterMap : ClassMap<Dnd5eMonsterDto>
{
    public Dnd5eMonsterMap()
    {
        Map(m => m.Name).Name("Name");
        Map(m => m.Size).Name("Size");
        Map(m => m.Type).Name("Type");
        Map(m => m.Alignment).Name("Alignment");
        Map(m => m.Habitat).Name("Habitat");
        Map(m => m.MainHabitat).Name("MainHabitat");
        Map(m => m.OtherHabitat).Name("OtherHabitat");
        Map(m => m.Treasure).Name("Treasure");
        Map(m => m.AC).Name("AC");
        Map(m => m.HP).Name("HP");
        Map(m => m.Initiative).Name("Initiative");
        Map(m => m.Walk).Name("Walk");
        Map(m => m.Burrow).Name("Burrow");
        Map(m => m.Climb).Name("Climb");
        Map(m => m.Fly).Name("Fly");
        Map(m => m.Hover).Name("Hover");
        Map(m => m.Swim).Name("Swim");
        Map(m => m.STR).Name("STR");
        Map(m => m.INT).Name("INT");
        Map(m => m.DEX).Name("DEX");
        Map(m => m.WIS).Name("WIS");
        Map(m => m.CON).Name("CON");
        Map(m => m.CHA).Name("CHA");
        Map(m => m.STR_Save).Name("STR_Save");
        Map(m => m.INT_Save).Name("INT_Save");
        Map(m => m.DEX_Save).Name("DEX_Save");
        Map(m => m.WIS_Save).Name("WIS_Save");
        Map(m => m.CON_Save).Name("CON_Save");
        Map(m => m.CHA_Save).Name("CHA_Save");
        Map(m => m.Proficient).Name("Proficient");
        Map(m => m.Expertise).Name("Expertise");
        Map(m => m.Vulnerabilities).Name("Vulnerabilities");
        Map(m => m.Slashing).Name("Slashing");
        Map(m => m.ImmunitiesConditions).Name("ImmunitiesConditions");
        Map(m => m.ImmunitiesDamage).Name("ImmunitiesDamage");
        Map(m => m.Blindsight).Name("Blindsight");
        Map(m => m.Darkvision).Name("Darkvision");
        Map(m => m.Truesight).Name("Truesight");
        Map(m => m.Tremorsense).Name("Tremorsense");
        Map(m => m.PassivePerception).Name("PassivePerception");
        Map(m => m.Languages).Name("Languages");
        Map(m => m.CR).Name("CR");
        Map(m => m.XP).Name("XP");
        Map(m => m.PB).Name("PB");
        Map(m => m.Traits).Name("Traits");
        Map(m => m.NumberOfLegendaryResistance).Name("NumberOfLegendaryResistance");
        Map(m => m.NumberOfAtk).Name("NumberOfAtk");
        Map(m => m.Atk1Type).Name("Atk1Type");
        Map(m => m.Atk1Mod).Name("Atk1Mod");
        Map(m => m.Atk1Range).Name("Atk1Range");
        Map(m => m.Atk1RangeShort).Name("Atk1RangeShort");
        Map(m => m.Atk1Damage).Name("Atk1Damage");
        Map(m => m.Atk1DamageType).Name("Atk1DamageType");
        Map(m => m.Atk2Type).Name("Atk2Type");
        Map(m => m.Atk2Mod).Name("Atk2Mod");
        Map(m => m.Atk2Range).Name("Atk2Range");
        Map(m => m.Atk2RangeShort).Name("Atk2RangeShort");
        Map(m => m.Atk2Damage).Name("Atk2Damage");
        Map(m => m.Atk2DamageType).Name("Atk2DamageType");
        Map(m => m.Atk3Type).Name("Atk3Type");
        Map(m => m.Atk3Mod).Name("Atk3Mod");
        Map(m => m.Atk3Range).Name("Atk3Range");
        Map(m => m.Atk3RangeShort).Name("Atk3RangeShort");
        Map(m => m.Atk3Damage).Name("Atk3Damage");
        Map(m => m.Atk3DamageType).Name("Atk3DamageType");
        Map(m => m.Atk4Type).Name("Atk4Type");
        Map(m => m.Atk4Mod).Name("Atk4Mod");
        Map(m => m.Atk4Range).Name("Atk4Range");
        Map(m => m.Atk4RangeShort).Name("Atk4RangeShort");
        Map(m => m.Atk4Damage).Name("Atk4Damage");
        Map(m => m.Atk4DamageType).Name("Atk4DamageType");
        Map(m => m.SaveDC).Name("SaveDC");
        Map(m => m.SavingThrow).Name("SavingThrow");
        Map(m => m.ActionNotes).Name("ActionNotes");
        Map(m => m.Ability).Name("Ability");
        Map(m => m.SpellSaveDC).Name("SpellSaveDC");
        Map(m => m.SpellSavingThrows).Name("SpellSavingThrows");
        Map(m => m.SpellAttack).Name("SpellAttack");
        Map(m => m.AtWill).Name("AtWill");
        Map(m => m.ThreePerDay).Name("ThreePerDay");
        Map(m => m.TwoPerDay).Name("TwoPerDay");
        Map(m => m.OnePerDay).Name("OnePerDay");
        Map(m => m.BonusAction).Name("BonusAction");
        Map(m => m.Reaction).Name("Reaction");
        Map(m => m.Amount).Name("Amount");
        Map(m => m.LegendaryActionSaveDC).Name("LegendaryActionSaveDC");
        Map(m => m.LegendaryActionSavingThrow).Name("LegendaryActionSavingThrow");
        Map(m => m.LegendaryActions).Name("LegendaryActions");
        Map(m => m.Lair).Name("Lair");
        Map(m => m.LegendaryResistance).Name("LegendaryResistance");
        Map(m => m.LairSaveDC).Name("LairSaveDC");
        Map(m => m.LairSavingThrows).Name("LairSavingThrows");
        Map(m => m.Other).Name("Other");
    }
}